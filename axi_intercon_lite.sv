// THIS FILE IS AUTOGENERATED BY axi_intercon_gen
// ANY MANUAL CHANGES WILL BE LOST
`include "include/axi_intercon_lite.svh"
//`include "axi/typedef.svh"
//`include "include/axi_intercon_lite.svh"
//`include "include/axi_intercon_lite.svh"

`default_nettype none
module axi_intercon_lite
   (input  wire        clk_i,
    input  wire        rst_ni,
    input  wire [39:0] i_AXILite_awaddr,
    input  wire  [2:0] i_AXILite_awprot,
    input  wire        i_AXILite_awvalid,
    output wire        o_AXILite_awready,
    input  wire [39:0] i_AXILite_araddr,
    input  wire  [2:0] i_AXILite_arprot,
    input  wire        i_AXILite_arvalid,
    output wire        o_AXILite_arready,
    input  wire [31:0] i_AXILite_wdata,
    input  wire  [3:0] i_AXILite_wstrb,
    input  wire        i_AXILite_wvalid,
    output wire        o_AXILite_wready,
    output wire  [1:0] o_AXILite_bresp,
    output wire        o_AXILite_bvalid,
    input  wire        i_AXILite_bready,
    output wire [31:0] o_AXILite_rdata,
    output wire  [1:0] o_AXILite_rresp,
    output wire        o_AXILite_rvalid,
    input  wire        i_AXILite_rready,
    output wire [39:0] o_PLIC_awaddr,
    output wire  [2:0] o_PLIC_awprot,
    output wire        o_PLIC_awvalid,
    input  wire        i_PLIC_awready,
    output wire [39:0] o_PLIC_araddr,
    output wire  [2:0] o_PLIC_arprot,
    output wire        o_PLIC_arvalid,
    input  wire        i_PLIC_arready,
    output wire [31:0] o_PLIC_wdata,
    output wire  [3:0] o_PLIC_wstrb,
    output wire        o_PLIC_wvalid,
    input  wire        i_PLIC_wready,
    input  wire  [1:0] i_PLIC_bresp,
    input  wire        i_PLIC_bvalid,
    output wire        o_PLIC_bready,
    input  wire [31:0] i_PLIC_rdata,
    input  wire  [1:0] i_PLIC_rresp,
    input  wire        i_PLIC_rvalid,
    output wire        o_PLIC_rready,
    output wire [39:0] o_UART0_awaddr,
    output wire  [2:0] o_UART0_awprot,
    output wire        o_UART0_awvalid,
    input  wire        i_UART0_awready,
    output wire [39:0] o_UART0_araddr,
    output wire  [2:0] o_UART0_arprot,
    output wire        o_UART0_arvalid,
    input  wire        i_UART0_arready,
    output wire [31:0] o_UART0_wdata,
    output wire  [3:0] o_UART0_wstrb,
    output wire        o_UART0_wvalid,
    input  wire        i_UART0_wready,
    input  wire  [1:0] i_UART0_bresp,
    input  wire        i_UART0_bvalid,
    output wire        o_UART0_bready,
    input  wire [31:0] i_UART0_rdata,
    input  wire  [1:0] i_UART0_rresp,
    input  wire        i_UART0_rvalid,
    output wire        o_UART0_rready,
    output wire [39:0] o_UART1_awaddr,
    output wire  [2:0] o_UART1_awprot,
    output wire        o_UART1_awvalid,
    input  wire        i_UART1_awready,
    output wire [39:0] o_UART1_araddr,
    output wire  [2:0] o_UART1_arprot,
    output wire        o_UART1_arvalid,
    input  wire        i_UART1_arready,
    output wire [31:0] o_UART1_wdata,
    output wire  [3:0] o_UART1_wstrb,
    output wire        o_UART1_wvalid,
    input  wire        i_UART1_wready,
    input  wire  [1:0] i_UART1_bresp,
    input  wire        i_UART1_bvalid,
    output wire        o_UART1_bready,
    input  wire [31:0] i_UART1_rdata,
    input  wire  [1:0] i_UART1_rresp,
    input  wire        i_UART1_rvalid,
    output wire        o_UART1_rready,
    output wire [39:0] o_SPI0_awaddr,
    output wire  [2:0] o_SPI0_awprot,
    output wire        o_SPI0_awvalid,
    input  wire        i_SPI0_awready,
    output wire [39:0] o_SPI0_araddr,
    output wire  [2:0] o_SPI0_arprot,
    output wire        o_SPI0_arvalid,
    input  wire        i_SPI0_arready,
    output wire [31:0] o_SPI0_wdata,
    output wire  [3:0] o_SPI0_wstrb,
    output wire        o_SPI0_wvalid,
    input  wire        i_SPI0_wready,
    input  wire  [1:0] i_SPI0_bresp,
    input  wire        i_SPI0_bvalid,
    output wire        o_SPI0_bready,
    input  wire [31:0] i_SPI0_rdata,
    input  wire  [1:0] i_SPI0_rresp,
    input  wire        i_SPI0_rvalid,
    output wire        o_SPI0_rready,
    output wire [39:0] o_SPI1_awaddr,
    output wire  [2:0] o_SPI1_awprot,
    output wire        o_SPI1_awvalid,
    input  wire        i_SPI1_awready,
    output wire [39:0] o_SPI1_araddr,
    output wire  [2:0] o_SPI1_arprot,
    output wire        o_SPI1_arvalid,
    input  wire        i_SPI1_arready,
    output wire [31:0] o_SPI1_wdata,
    output wire  [3:0] o_SPI1_wstrb,
    output wire        o_SPI1_wvalid,
    input  wire        i_SPI1_wready,
    input  wire  [1:0] i_SPI1_bresp,
    input  wire        i_SPI1_bvalid,
    output wire        o_SPI1_bready,
    input  wire [31:0] i_SPI1_rdata,
    input  wire  [1:0] i_SPI1_rresp,
    input  wire        i_SPI1_rvalid,
    output wire        o_SPI1_rready,
    output wire [39:0] o_VGA_awaddr,
    output wire  [2:0] o_VGA_awprot,
    output wire        o_VGA_awvalid,
    input  wire        i_VGA_awready,
    output wire [39:0] o_VGA_araddr,
    output wire  [2:0] o_VGA_arprot,
    output wire        o_VGA_arvalid,
    input  wire        i_VGA_arready,
    output wire [31:0] o_VGA_wdata,
    output wire  [3:0] o_VGA_wstrb,
    output wire        o_VGA_wvalid,
    input  wire        i_VGA_wready,
    input  wire  [1:0] i_VGA_bresp,
    input  wire        i_VGA_bvalid,
    output wire        o_VGA_bready,
    input  wire [31:0] i_VGA_rdata,
    input  wire  [1:0] i_VGA_rresp,
    input  wire        i_VGA_rvalid,
    output wire        o_VGA_rready,
    output wire [39:0] o_TIMER_awaddr,
    output wire  [2:0] o_TIMER_awprot,
    output wire        o_TIMER_awvalid,
    input  wire        i_TIMER_awready,
    output wire [39:0] o_TIMER_araddr,
    output wire  [2:0] o_TIMER_arprot,
    output wire        o_TIMER_arvalid,
    input  wire        i_TIMER_arready,
    output wire [31:0] o_TIMER_wdata,
    output wire  [3:0] o_TIMER_wstrb,
    output wire        o_TIMER_wvalid,
    input  wire        i_TIMER_wready,
    input  wire  [1:0] i_TIMER_bresp,
    input  wire        i_TIMER_bvalid,
    output wire        o_TIMER_bready,
    input  wire [31:0] i_TIMER_rdata,
    input  wire  [1:0] i_TIMER_rresp,
    input  wire        i_TIMER_rvalid,
    output wire        o_TIMER_rready,
    output wire [39:0] o_ADC_awaddr,
    output wire  [2:0] o_ADC_awprot,
    output wire        o_ADC_awvalid,
    input  wire        i_ADC_awready,
    output wire [39:0] o_ADC_araddr,
    output wire  [2:0] o_ADC_arprot,
    output wire        o_ADC_arvalid,
    input  wire        i_ADC_arready,
    output wire [31:0] o_ADC_wdata,
    output wire  [3:0] o_ADC_wstrb,
    output wire        o_ADC_wvalid,
    input  wire        i_ADC_wready,
    input  wire  [1:0] i_ADC_bresp,
    input  wire        i_ADC_bvalid,
    output wire        o_ADC_bready,
    input  wire [31:0] i_ADC_rdata,
    input  wire  [1:0] i_ADC_rresp,
    input  wire        i_ADC_rvalid,
    output wire        o_ADC_rready,
    output wire [39:0] o_DAC_awaddr,
    output wire  [2:0] o_DAC_awprot,
    output wire        o_DAC_awvalid,
    input  wire        i_DAC_awready,
    output wire [39:0] o_DAC_araddr,
    output wire  [2:0] o_DAC_arprot,
    output wire        o_DAC_arvalid,
    input  wire        i_DAC_arready,
    output wire [31:0] o_DAC_wdata,
    output wire  [3:0] o_DAC_wstrb,
    output wire        o_DAC_wvalid,
    input  wire        i_DAC_wready,
    input  wire  [1:0] i_DAC_bresp,
    input  wire        i_DAC_bvalid,
    output wire        o_DAC_bready,
    input  wire [31:0] i_DAC_rdata,
    input  wire  [1:0] i_DAC_rresp,
    input  wire        i_DAC_rvalid,
    output wire        o_DAC_rready);


  localparam int unsigned NoMasters   = 32'd1;    // How many Axi Masters there are
  localparam int unsigned NoSlaves    = 32'd9;    // How many Axi Slaves  there are

  // axi configuration
  localparam int unsigned AxiIdWidthMasters =  32'd1;
  localparam int unsigned AxiIdUsed         =  32'd1; // Has to be <= AxiIdWidthMasters
  localparam int unsigned AxiIdWidthSlaves  =  AxiIdWidthMasters + $clog2(NoMasters);
  localparam int unsigned AxiAddrWidth      =  32'd32;    // Axi Address Width
  localparam int unsigned AxiDataWidth      =  32'd64;    // Axi Data Width
  localparam int unsigned AxiStrbWidth      =  AxiDataWidth / 8;
  localparam int unsigned AxiUserWidth      =  1;
  localparam axi_pkg::xbar_cfg_t xbar_cfg = '{

    NoSlvPorts:         NoMasters,
    NoMstPorts:         NoSlaves,
    MaxMstTrans:        10,
    MaxSlvTrans:        6,
    FallThrough:        1'b0,
    LatencyMode:        axi_pkg::CUT_ALL_AX,
    PipelineStages:		0,
    AxiIdWidthSlvPorts: AxiIdWidthMasters,
    AxiIdUsedSlvPorts:  AxiIdUsed,
    UniqueIds:          1'b0,
    AxiAddrWidth:       AxiAddrWidth,
    AxiDataWidth:       AxiDataWidth,
    NoAddrRules:        NoSlaves
  };

  typedef logic [AxiAddrWidth-1:0]      addr_t;
  typedef logic [AxiDataWidth-1:0]      data_t;
  typedef logic [AxiStrbWidth-1:0]      strb_t;
  typedef axi_pkg::xbar_rule_32_t       rule_t; // Has to be the same width as axi addr
  
  `AXI_LITE_TYPEDEF_AW_CHAN_T(aw_chan_lite_t, addr_t)
  `AXI_LITE_TYPEDEF_W_CHAN_T(w_chan_lite_t, data_t, strb_t)
  `AXI_LITE_TYPEDEF_B_CHAN_T(b_chan_lite_t)
  `AXI_LITE_TYPEDEF_AR_CHAN_T(ar_chan_lite_t, addr_t)
  `AXI_LITE_TYPEDEF_R_CHAN_T(r_chan_lite_t, data_t)
  `AXI_LITE_TYPEDEF_REQ_T(axi_req_t, aw_chan_lite_t, w_chan_lite_t, ar_chan_lite_t)
  `AXI_LITE_TYPEDEF_RESP_T(axi_resp_t, b_chan_lite_t, r_chan_lite_t)

  localparam rule_t [8:0] AddrMap = '{
    '{idx: 32'd0, start_addr: 32'h140000000, end_addr: 32'h143ffffff},
    '{idx: 32'd1, start_addr: 32'h144000000, end_addr: 32'h14400ffff},
    '{idx: 32'd2, start_addr: 32'h144010000, end_addr: 32'h14401ffff},
    '{idx: 32'd3, start_addr: 32'h144020000, end_addr: 32'h14402ffff},
    '{idx: 32'd4, start_addr: 32'h144030000, end_addr: 32'h14403ffff},
    '{idx: 32'd5, start_addr: 32'h144100000, end_addr: 32'h14410ffff},
    '{idx: 32'd6, start_addr: 32'h144110000, end_addr: 32'h14411ffff},
    '{idx: 32'd7, start_addr: 32'h144200000, end_addr: 32'h14420ffff},
    '{idx: 32'd8, start_addr: 32'h144210000, end_addr: 32'h14421ffff}};
   axi_req_t  [0:0] masters_req;
   axi_resp_t [0:0] masters_resp;
   axi_req_t  [8:0] slaves_req;
   axi_resp_t [8:0] slaves_resp;

   //Master AXILite
   assign masters_req[0].aw.addr = i_AXILite_awaddr;
   assign masters_req[0].aw.prot = i_AXILite_awprot;
   assign masters_req[0].aw_valid = i_AXILite_awvalid;
   assign o_AXILite_awready = masters_resp[0].aw_ready;
   assign masters_req[0].ar.addr = i_AXILite_araddr;
   assign masters_req[0].ar.prot = i_AXILite_arprot;
   assign masters_req[0].ar_valid = i_AXILite_arvalid;
   assign o_AXILite_arready = masters_resp[0].ar_ready;
   assign masters_req[0].w.data = i_AXILite_wdata;
   assign masters_req[0].w.strb = i_AXILite_wstrb;
   assign masters_req[0].w_valid = i_AXILite_wvalid;
   assign o_AXILite_wready = masters_resp[0].w_ready;
   assign o_AXILite_bresp = masters_resp[0].b.resp;
   assign o_AXILite_bvalid = masters_resp[0].b_valid;
   assign masters_req[0].b_ready = i_AXILite_bready;
   assign o_AXILite_rdata = masters_resp[0].r.data;
   assign o_AXILite_rresp = masters_resp[0].r.resp;
   assign o_AXILite_rvalid = masters_resp[0].r_valid;
   assign masters_req[0].r_ready = i_AXILite_rready;

   //Slave PLIC
   assign o_PLIC_awaddr = slaves_req[0].aw.addr;
   assign o_PLIC_awprot = slaves_req[0].aw.prot;
   assign o_PLIC_awvalid = slaves_req[0].aw_valid;
   assign slaves_resp[0].aw_ready = i_PLIC_awready;
   assign o_PLIC_araddr = slaves_req[0].ar.addr;
   assign o_PLIC_arprot = slaves_req[0].ar.prot;
   assign o_PLIC_arvalid = slaves_req[0].ar_valid;
   assign slaves_resp[0].ar_ready = i_PLIC_arready;
   assign o_PLIC_wdata = slaves_req[0].w.data;
   assign o_PLIC_wstrb = slaves_req[0].w.strb;
   assign o_PLIC_wvalid = slaves_req[0].w_valid;
   assign slaves_resp[0].w_ready = i_PLIC_wready;
   assign slaves_resp[0].b.resp = i_PLIC_bresp;
   assign slaves_resp[0].b_valid = i_PLIC_bvalid;
   assign o_PLIC_bready = slaves_req[0].b_ready;
   assign slaves_resp[0].r.data = i_PLIC_rdata;
   assign slaves_resp[0].r.resp = i_PLIC_rresp;
   assign slaves_resp[0].r_valid = i_PLIC_rvalid;
   assign o_PLIC_rready = slaves_req[0].r_ready;

   //Slave UART0
   assign o_UART0_awaddr = slaves_req[1].aw.addr;
   assign o_UART0_awprot = slaves_req[1].aw.prot;
   assign o_UART0_awvalid = slaves_req[1].aw_valid;
   assign slaves_resp[1].aw_ready = i_UART0_awready;
   assign o_UART0_araddr = slaves_req[1].ar.addr;
   assign o_UART0_arprot = slaves_req[1].ar.prot;
   assign o_UART0_arvalid = slaves_req[1].ar_valid;
   assign slaves_resp[1].ar_ready = i_UART0_arready;
   assign o_UART0_wdata = slaves_req[1].w.data;
   assign o_UART0_wstrb = slaves_req[1].w.strb;
   assign o_UART0_wvalid = slaves_req[1].w_valid;
   assign slaves_resp[1].w_ready = i_UART0_wready;
   assign slaves_resp[1].b.resp = i_UART0_bresp;
   assign slaves_resp[1].b_valid = i_UART0_bvalid;
   assign o_UART0_bready = slaves_req[1].b_ready;
   assign slaves_resp[1].r.data = i_UART0_rdata;
   assign slaves_resp[1].r.resp = i_UART0_rresp;
   assign slaves_resp[1].r_valid = i_UART0_rvalid;
   assign o_UART0_rready = slaves_req[1].r_ready;

   //Slave UART1
   assign o_UART1_awaddr = slaves_req[2].aw.addr;
   assign o_UART1_awprot = slaves_req[2].aw.prot;
   assign o_UART1_awvalid = slaves_req[2].aw_valid;
   assign slaves_resp[2].aw_ready = i_UART1_awready;
   assign o_UART1_araddr = slaves_req[2].ar.addr;
   assign o_UART1_arprot = slaves_req[2].ar.prot;
   assign o_UART1_arvalid = slaves_req[2].ar_valid;
   assign slaves_resp[2].ar_ready = i_UART1_arready;
   assign o_UART1_wdata = slaves_req[2].w.data;
   assign o_UART1_wstrb = slaves_req[2].w.strb;
   assign o_UART1_wvalid = slaves_req[2].w_valid;
   assign slaves_resp[2].w_ready = i_UART1_wready;
   assign slaves_resp[2].b.resp = i_UART1_bresp;
   assign slaves_resp[2].b_valid = i_UART1_bvalid;
   assign o_UART1_bready = slaves_req[2].b_ready;
   assign slaves_resp[2].r.data = i_UART1_rdata;
   assign slaves_resp[2].r.resp = i_UART1_rresp;
   assign slaves_resp[2].r_valid = i_UART1_rvalid;
   assign o_UART1_rready = slaves_req[2].r_ready;

   //Slave SPI0
   assign o_SPI0_awaddr = slaves_req[3].aw.addr;
   assign o_SPI0_awprot = slaves_req[3].aw.prot;
   assign o_SPI0_awvalid = slaves_req[3].aw_valid;
   assign slaves_resp[3].aw_ready = i_SPI0_awready;
   assign o_SPI0_araddr = slaves_req[3].ar.addr;
   assign o_SPI0_arprot = slaves_req[3].ar.prot;
   assign o_SPI0_arvalid = slaves_req[3].ar_valid;
   assign slaves_resp[3].ar_ready = i_SPI0_arready;
   assign o_SPI0_wdata = slaves_req[3].w.data;
   assign o_SPI0_wstrb = slaves_req[3].w.strb;
   assign o_SPI0_wvalid = slaves_req[3].w_valid;
   assign slaves_resp[3].w_ready = i_SPI0_wready;
   assign slaves_resp[3].b.resp = i_SPI0_bresp;
   assign slaves_resp[3].b_valid = i_SPI0_bvalid;
   assign o_SPI0_bready = slaves_req[3].b_ready;
   assign slaves_resp[3].r.data = i_SPI0_rdata;
   assign slaves_resp[3].r.resp = i_SPI0_rresp;
   assign slaves_resp[3].r_valid = i_SPI0_rvalid;
   assign o_SPI0_rready = slaves_req[3].r_ready;

   //Slave SPI1
   assign o_SPI1_awaddr = slaves_req[4].aw.addr;
   assign o_SPI1_awprot = slaves_req[4].aw.prot;
   assign o_SPI1_awvalid = slaves_req[4].aw_valid;
   assign slaves_resp[4].aw_ready = i_SPI1_awready;
   assign o_SPI1_araddr = slaves_req[4].ar.addr;
   assign o_SPI1_arprot = slaves_req[4].ar.prot;
   assign o_SPI1_arvalid = slaves_req[4].ar_valid;
   assign slaves_resp[4].ar_ready = i_SPI1_arready;
   assign o_SPI1_wdata = slaves_req[4].w.data;
   assign o_SPI1_wstrb = slaves_req[4].w.strb;
   assign o_SPI1_wvalid = slaves_req[4].w_valid;
   assign slaves_resp[4].w_ready = i_SPI1_wready;
   assign slaves_resp[4].b.resp = i_SPI1_bresp;
   assign slaves_resp[4].b_valid = i_SPI1_bvalid;
   assign o_SPI1_bready = slaves_req[4].b_ready;
   assign slaves_resp[4].r.data = i_SPI1_rdata;
   assign slaves_resp[4].r.resp = i_SPI1_rresp;
   assign slaves_resp[4].r_valid = i_SPI1_rvalid;
   assign o_SPI1_rready = slaves_req[4].r_ready;

   //Slave VGA
   assign o_VGA_awaddr = slaves_req[5].aw.addr;
   assign o_VGA_awprot = slaves_req[5].aw.prot;
   assign o_VGA_awvalid = slaves_req[5].aw_valid;
   assign slaves_resp[5].aw_ready = i_VGA_awready;
   assign o_VGA_araddr = slaves_req[5].ar.addr;
   assign o_VGA_arprot = slaves_req[5].ar.prot;
   assign o_VGA_arvalid = slaves_req[5].ar_valid;
   assign slaves_resp[5].ar_ready = i_VGA_arready;
   assign o_VGA_wdata = slaves_req[5].w.data;
   assign o_VGA_wstrb = slaves_req[5].w.strb;
   assign o_VGA_wvalid = slaves_req[5].w_valid;
   assign slaves_resp[5].w_ready = i_VGA_wready;
   assign slaves_resp[5].b.resp = i_VGA_bresp;
   assign slaves_resp[5].b_valid = i_VGA_bvalid;
   assign o_VGA_bready = slaves_req[5].b_ready;
   assign slaves_resp[5].r.data = i_VGA_rdata;
   assign slaves_resp[5].r.resp = i_VGA_rresp;
   assign slaves_resp[5].r_valid = i_VGA_rvalid;
   assign o_VGA_rready = slaves_req[5].r_ready;

   //Slave TIMER
   assign o_TIMER_awaddr = slaves_req[6].aw.addr;
   assign o_TIMER_awprot = slaves_req[6].aw.prot;
   assign o_TIMER_awvalid = slaves_req[6].aw_valid;
   assign slaves_resp[6].aw_ready = i_TIMER_awready;
   assign o_TIMER_araddr = slaves_req[6].ar.addr;
   assign o_TIMER_arprot = slaves_req[6].ar.prot;
   assign o_TIMER_arvalid = slaves_req[6].ar_valid;
   assign slaves_resp[6].ar_ready = i_TIMER_arready;
   assign o_TIMER_wdata = slaves_req[6].w.data;
   assign o_TIMER_wstrb = slaves_req[6].w.strb;
   assign o_TIMER_wvalid = slaves_req[6].w_valid;
   assign slaves_resp[6].w_ready = i_TIMER_wready;
   assign slaves_resp[6].b.resp = i_TIMER_bresp;
   assign slaves_resp[6].b_valid = i_TIMER_bvalid;
   assign o_TIMER_bready = slaves_req[6].b_ready;
   assign slaves_resp[6].r.data = i_TIMER_rdata;
   assign slaves_resp[6].r.resp = i_TIMER_rresp;
   assign slaves_resp[6].r_valid = i_TIMER_rvalid;
   assign o_TIMER_rready = slaves_req[6].r_ready;

   //Slave ADC
   assign o_ADC_awaddr = slaves_req[7].aw.addr;
   assign o_ADC_awprot = slaves_req[7].aw.prot;
   assign o_ADC_awvalid = slaves_req[7].aw_valid;
   assign slaves_resp[7].aw_ready = i_ADC_awready;
   assign o_ADC_araddr = slaves_req[7].ar.addr;
   assign o_ADC_arprot = slaves_req[7].ar.prot;
   assign o_ADC_arvalid = slaves_req[7].ar_valid;
   assign slaves_resp[7].ar_ready = i_ADC_arready;
   assign o_ADC_wdata = slaves_req[7].w.data;
   assign o_ADC_wstrb = slaves_req[7].w.strb;
   assign o_ADC_wvalid = slaves_req[7].w_valid;
   assign slaves_resp[7].w_ready = i_ADC_wready;
   assign slaves_resp[7].b.resp = i_ADC_bresp;
   assign slaves_resp[7].b_valid = i_ADC_bvalid;
   assign o_ADC_bready = slaves_req[7].b_ready;
   assign slaves_resp[7].r.data = i_ADC_rdata;
   assign slaves_resp[7].r.resp = i_ADC_rresp;
   assign slaves_resp[7].r_valid = i_ADC_rvalid;
   assign o_ADC_rready = slaves_req[7].r_ready;

   //Slave DAC
   assign o_DAC_awaddr = slaves_req[8].aw.addr;
   assign o_DAC_awprot = slaves_req[8].aw.prot;
   assign o_DAC_awvalid = slaves_req[8].aw_valid;
   assign slaves_resp[8].aw_ready = i_DAC_awready;
   assign o_DAC_araddr = slaves_req[8].ar.addr;
   assign o_DAC_arprot = slaves_req[8].ar.prot;
   assign o_DAC_arvalid = slaves_req[8].ar_valid;
   assign slaves_resp[8].ar_ready = i_DAC_arready;
   assign o_DAC_wdata = slaves_req[8].w.data;
   assign o_DAC_wstrb = slaves_req[8].w.strb;
   assign o_DAC_wvalid = slaves_req[8].w_valid;
   assign slaves_resp[8].w_ready = i_DAC_wready;
   assign slaves_resp[8].b.resp = i_DAC_bresp;
   assign slaves_resp[8].b_valid = i_DAC_bvalid;
   assign o_DAC_bready = slaves_req[8].b_ready;
   assign slaves_resp[8].r.data = i_DAC_rdata;
   assign slaves_resp[8].r.resp = i_DAC_rresp;
   assign slaves_resp[8].r_valid = i_DAC_rvalid;
   assign o_DAC_rready = slaves_req[8].r_ready;


axi_lite_xbar
  #(.Cfg        (xbar_cfg),
    .aw_chan_t  (aw_chan_lite_t),
    .w_chan_t   (w_chan_lite_t),
    .b_chan_t   (b_chan_lite_t),
    .ar_chan_t  (ar_chan_lite_t),
    .r_chan_t   (r_chan_lite_t),
    .axi_req_t  (axi_req_t),
    .axi_resp_t (axi_resp_t),
    .rule_t     (rule_t))
 axi_lite_xbar
   (.clk_i                 (clk_i),
    .rst_ni                (rst_ni),
    .test_i                (1'b0),
    .slv_ports_req_i       (masters_req),
    .slv_ports_resp_o      (masters_resp),
    .mst_ports_req_o       (slaves_req),
    .mst_ports_resp_i      (slaves_resp),
    .addr_map_i            (AddrMap),
    .en_default_mst_port_i (1'd0),
    .default_mst_port_i    ('0));

endmodule
